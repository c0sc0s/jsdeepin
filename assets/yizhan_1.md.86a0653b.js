import{_ as p,c as s,o as t,d as c}from"./app.b7ae7681.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"进程和线程","slug":"进程和线程","link":"#进程和线程","children":[{"level":3,"title":"程序","slug":"程序","link":"#程序","children":[]},{"level":3,"title":"进程","slug":"进程","link":"#进程","children":[]},{"level":3,"title":"线程","slug":"线程","link":"#线程","children":[]}]}],"relativePath":"yizhan/1.md","lastUpdated":null}'),o={name:"yizhan/1.md"},e=c('<h2 id="进程和线程" tabindex="-1">进程和线程 <a class="header-anchor" href="#进程和线程" aria-hidden="true">#</a></h2><p>欢迎来到驿站第一课，进程和线程！</p><p>自我介绍一下，我是驿站管理员圆点！😎</p><p>进程和线程是现代操作系统中相当重要的一节课，也是我们今后理解程序的运行以及将来学习浏览器架构的重要模型！</p><p>话不多说我们开始！</p><h3 id="程序" tabindex="-1">程序 <a class="header-anchor" href="#程序" aria-hidden="true">#</a></h3><p>我们在说明进程和线程的概念之前，先搞清楚什么才是我们平时说的程序。</p><div class="info custom-block"><p class="custom-block-title">阿光</p><p>这题我会！这还不简单？我们平时写的那些东西不就是程序嘛。</p></div><p>错了阿光！我们平时写的那些代码，从 本质上讲不过是字符串而已。和你通过微信发送给别人的文本没有本质的区别。</p><div class="info custom-block"><p class="custom-block-title">阿光</p><p>啊？不对吧，我们写的代码明明可以运行啊，怎么说是普通字符串呢。</p></div><p>我们写的那些代码确实只不过是字符串，但是和你随手发给别人的信息不同的是，代码有确定的语法格式，所以说我们写的是一些满足某个语法的确定格式的文本。</p><div class="info custom-block"><p class="custom-block-title">阿光</p><p>哦真的唉！但就算他是固定格式的字符串，那他本质还是字符串啊。</p></div><p>没错，计算机是不认识我们写的字符串的，计算机的逻辑主要依靠CPU执行，而CPU只认识一条一条从诞生就固定下来的指令，而这些指令本质上不过是 0和1构成的一个二进制串，CPU通过不同的指令执行不同的动作。</p><div class="info custom-block"><p class="custom-block-title">阿光</p><p>我明白了，就是说计算机并不认识我们写的代码，他只认识指令，emm，那我们的代码是怎么执行的呢？他不是不认识吗？</p></div><p>你总结的很正确，计算机无法执行我们写的代码。但是我们可以通过一个工具，将我们写的代码（字符串）转换成具有相同逻辑的计算机可以识别的指令。</p><p>如果是JS的话，就是通过 JS 引擎，也就是他的解释器来完成这个工作</p><p><img src="https://k1img.06dn.com/y/43/2023/01/13/43_63c0e613ef41a.png" alt="示例图"></p><p>程序这个名词是一个广义的抽象，他就表示这段代码转换后，计算机可执行的指令。</p><div class="info custom-block"><p class="custom-block-title">阿光</p><p>哦~我明白了，所以我们的代码并不等同于程序，因为计算机无法执行我们写的代码，程序应该是代码经过转换后计算机可以识别的指令集合。哦！所以我们写的JS代码无法直接运行，而必须运行在 浏览器（或者node) 环境下！因为需要一个程序将他转换。</p></div><p>对，顺便说点额外的，你知道C语言吗，C语言代码可以通过自己的编译器提前转换成 计算机可以识别的二进制文件，称之为可执行文件，一般在 windows系统下，这种文件后缀基本是 <code>exe</code> ， 这个文件就称之为程序，但JS不同于C语言，他不能提前编译，而需要执行在宿主环境中，他每次执行都要重写编译，JS这种语言我们称之为 <code>解释性语言</code> , 而类似 C 语言可以提前编译的我们称之为 <code>编译性语言</code>。</p><h3 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-hidden="true">#</a></h3><p>现在我们有了一个基本的认识，我们写的代码，不过是满足某个语法的字符串而已，代码想要执行，必须通过一个程序将其转换为计算机可执行二进制指令。这些指令的集合便可以称之为 <code>程序</code>。</p><p>什么是进程呢？</p><p>那就不得不再说点额外的基础知识了。</p><p>前面说过，所谓的执行代码，其实是通过CPU执行不同的指令完成的。</p><p>而CPU执行指令的本质是——<strong>读写数据</strong>。</p><p>计算机一切行为的目的都可以追溯为<strong>存储数据，修改数据，读取数据。</strong></p><p>所以对于计算机而言，存储数据的硬件极其重要，CPU 读写数据的速度很关键。</p><div class="info custom-block"><p class="custom-block-title">阿光</p><p>这题我会，计算机存储数据是通过内存，我的电脑的内存是 512 G! CPU就是操作这里的数据吧。</p></div><p>哈哈阿光你错了，你犯了一个计算机小白的共识错误。</p><p>像这种我们平时下载软件图片存储的位置，叫做计算机的硬盘。</p><p><img src="https://k1img.06dn.com/y/43/2023/01/13/43_63c0ec1e1300b.png" alt="硬盘"></p><p>而硬盘真正的学名应该叫 ROM (<strong>R</strong>ead <strong>O</strong>nly <strong>M</strong>emory), 容量较大，一般是由磁力驱动的，所以就算你的电脑关机了，没电了，里面的数据依然还在。</p><p>但内存一般指的并不是这个，而是另外一个叫做 RAM(<strong>R</strong>ead Random <strong>M</strong>emory) 的东西，这个东西一般并不会很大，比如我的电脑配置比较低是8G😭。</p><p>你可以在任务管理器中看到电脑内存的使用情况</p><p><img src="https://k1img.06dn.com/y/43/2023/01/13/43_63c0eed3d4691.png" alt="ram"></p><p>而CPU只会读写RAM（也就是我们说的内存）中的数据，所以程序的指令需要加载到RAM中才能被CPU读取和执行。</p><p>所以你懂了吧！硬盘一般存储一些静态的数据，比如我们的图片，文本，我们的程序。当我们双击我们的程序，程序的指令就会从硬盘中(ROM)加载如内存(RAM),然后被CPU执行。</p><p>所以大家可以想象这样一个场景：</p><p>双击记事本，发生了什么？</p><p>记事本这个程序的指令从硬盘里加载入了内存，CPU读取这些指令开始执行，我们在记事本中写的那些数据为什么要保存？因为保存前数据都是在内存RAM中的，只有保存后，这些数据才会被存储到硬盘中的。</p><p>如果你没来得及保存，电脑忽然没电了，那就完了。因为RAM是靠电力驱动的，一旦没电里面的数据全部消失，所以你知道及时保存文件的重要性了吗。</p><div class="info custom-block"><p class="custom-block-title">阿光</p><p>啊？硬盘内存那么大，还便宜，内存又贵容量小，为什么一定要读取内存里的数据啊，CPU直接读取硬盘不香吗？</p></div><p>好问题！之所以要有内存这个东西，是为了提高CPU读写数据的速度，CPU如果直接对硬盘进行读写速度是很慢的，但对内存读写是很快的，所以内存相当于一个中介，提高计算机的效率。</p><p><img src="https://k1img.06dn.com/y/43/2023/01/13/43_63c0f1f1b323b.png" alt="内存和硬盘的关系图"></p><div class="info custom-block"><p class="custom-block-title">阿光</p><p>我明白了，内存相当于一个聪明的中间人！那说了这么半天和进程有啥关系？没听到你说进程啊。</p></div><p>哈哈哈，我这是进程只字未提，却满嘴都是进程。其实进程我已经讲完了。</p><p>我们回顾一下，指令存在硬盘中我们称之为程序。</p><p>而程序的运行需要被加载入内存，才能被CPU调度，进程就是程序执行过程中分配资源的抽象。</p><div class="info custom-block"><p class="custom-block-title">阿光</p><p>大致懂了，又好像没懂，圆点姐姐，你最后说的分配资源是什么意思？</p></div><p>（敲脑袋），什么是资源，内存那么小，你占一点是不是用一点资源。</p><p>所以所谓的分配资源就是指操作系统为这个程序的执行分配对应的内存空间啦。</p><p>所以你可以把进程简单的理解为程序执行过程中，所有资源的抽象。</p><div class="info custom-block"><p class="custom-block-title">阿光</p><p>谁来为程序的执行分配对应的内存呢？又是用什么标准分配呢？</p></div><p>这个问题问的很好，为即将执行的程序分配内存这个逻辑，是由另外一个庞大的程序负责的，这个程序就是我们每个人电脑里都有的——操作系统。</p><p>操作系统也是一个程序，这又涉及到更深的知识了，如果你感兴趣，可以去阅读更多的资料。</p><h3 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-hidden="true">#</a></h3><p>线程也是一个抽象概念，指的是进程中的一个执行流。我们写的JS，基本上都是（不用web worker) 单线程的，就是说只有一个执行流。所以显而易见的是，任何一个进程，至少有一个线程（至少一个执行流）。有些语言支持多线程编程，比如C和Java...这就涉及到多线程中更多的知识了，我们并不需要，我们要理解的是，线程的抽象概念。</p><p>一个进程可以有多个多个执行流，但是JS绝大部分情况下都是单线程的（web worker可以实现多线程）。</p><p>其实多线程是另一块很大的知识点，我们就不多说了，希望大家理解，一个程序的执行流就是线程，线程是程序运行实体的抽象，进程是运行过程中资源分配的抽象。</p><div class="warning custom-block"><p class="custom-block-title">提示</p><p>这里有余弦录制的视频：</p><p><a href="https://www.bilibili.com/video/BV1Ed4y1x7oN?p=3&amp;vd_source=f8e6083a4ab637f966ebe160afcf4431" target="_blank" rel="noreferrer">前往观看</a></p></div><div class="tip custom-block"><p class="custom-block-title">前往浏览器大陆</p><p>好了！你已经掌握了前往浏览器大陆的前置知识，多看几遍好好消化哦。</p><p>余弦他们在浏览器大陆等着你呢！</p><p><a href="./../browser/6.html">前往浏览器大陆</a></p></div>',62),l=[e];function a(i,d,n,r,m,h){return t(),s("div",null,l)}const k=p(o,[["render",a]]);export{u as __pageData,k as default};
